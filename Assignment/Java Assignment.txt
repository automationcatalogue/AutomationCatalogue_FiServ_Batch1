Assignment-1:
------------
Take any five subject marks
 maths=70, english =75, science = ... etc.,
 
 1. Print the total of all 5 subject marks
 2. Average of all 5 subject marks
	==> Based on Condition, print whether student is Distinction/First Class/Second Class/Third Class/Failed
	==>avg>70 --> Distinction
	
	if(avg>70){
		System.out.println("Distinction");
	}
	
	==>avg 60 to 70 --> First class
	if(){
		System.out.println("First class");
	}
	
	==> avg 50 to 60 --> Second class
	if(){
		System.out.println("Second class");
	}
	
	==> avg 40 to 50 --> Third class
	if(){
		System.out.println("Third class");
	}
	
	==> avg<40 --> Failed
	if(){
		System.out.println("Failed");
	}
	
2. Calculate the Simple Interest by using below formula
	SI = ptr/100
	p--> principal amount take --> 1000
	t--> time --> 2 years
	r--> rate of Interest --> 0.85
	
3. To calculate the algebric expression z=ax+b/ax-b.
z=ax+b/ax-b.

a=10, b=20, x=5
=================================================================================
Assignment-2
1. Write a Java Program for the below requirements
	Take any '3' values and print all these values in descending order
	
2. Take some number and print the factorial of a number using While Loop
	n=5==> 5!==> (5*4*3*2*1)==> 120
	n=6==> 6!==> (6*5*4*3*2*1)==> 720
	
3. Take some number n=469 and print reverse of a number ==> 964
===================================================================================================
Assignment-3
1. Take number n=371 and check whether given number is Armstong number or not [implement this logis using DOWHILE and FOR LOOPS]
	
	Armstrong number is --> sum of the cubes of Individual digits
	==> 3^3 + 7^3+ 1^3
	==> 27 + 343 + 1 = 371
=====================================================================================================
Assignment-4:
1. Take number n=145 and check whether given number is Strong number or not [implement this logis using  Nested FOR LOOPS]
	
	Strong number is --> sum of the Factorial of Individual digits
	==> 1 ! + 4! 5 !
	==> 1 + 24 + 120 ==> 145

===========================================================================================================
Assignment-5:
1. Write a class "Test", create instance variable
    int x=456;//instance variable
    static int m=90, e=85, sc=65,so=40, h=74;//class variables
2. Write the another class ReverseDemo
    Print the reverse of a number of Test class x variable
    output should be --> 654

3. Write the another class AvgDemo
    Print the sum of all student marks and then get the avg
    if(avg>70){
    		System.out.println("Distinction");
    	}

    	==>avg 60 to 70 --> First class
    	if(){
    		System.out.println("First class");
    	}

    	==> avg 50 to 60 --> Second class
    	if(){
    		System.out.println("Second class");
    	}

    	==> avg 40 to 50 --> Third class
    	if(){
    		System.out.println("Third class");
    	}

    	==> avg<40 --> Failed
    	if(){
    		System.out.println("Failed");
    	}
======================================================================================================
Assignment-6:

Take the array int a[]={7, 12, 15, 17, 9,21};
1. By using regular for loop --> print sum of all Prime numbers

2. By using advanced for loop --> print sum of all Prime numbers
   
3. Write a Test2 class and then define '4' method
	1. Instance method --> factorial number logic
	2. class method --> prime number logic
	3. Instance method --> reverse of a number logic
	4. class method --> Write the logic of 5 subject student marks
	
	Write a class Demo2 --> write the main method here
	and call all '4' methods of Test2 and then execute it

======================================================================================================
Assignment-7:

1. Take '3' numbers in Test class
    triangle() method
    If all '3' numbers --> Equilateral triangle --> sum of all the three number(Separate method)
    If any '2' numbers --> Bilateral triangle --> Print the unique number (Separate method)
    If all'3'sides of a triangle --> Scalen triangle --> print the highest number (separate method)
======================================================================================================
Assignment-8:

//Constructors
1. Create a "PrimeDemo Class" --> Write the Parameterized Constructor --> take the argument as one integere variable 'x' --> check whether this 'x' is a prime number or not
2. Create a "SumEvenDemo" Class --> write the Default constuctor --> Take the array of Integers inside the default constuctor --> write a program to calculate the sum of All numbers using Enhanced for loop
3. Create a "Demo" Class --> write a main method --> Create objects for PrimeDemo class and SumEvenDemo class --> verify whether Constructors of the "PrimeDemo" and "SumEvenDemo" class are executed whenever object is created

//Inheritance
1. create a class "A" --> //super class (or) parent class
		write the instance variable called 
		int test=99;
		
		write the instance method
		//method with arguments and with return type
		int factDemo(int x){
			
		}
		
2. Create a class "B" extends A --> //sub class (or) child class
		write the instance variable called 
		int sample=55;
		
		write the instance method
		//method with arguments and without return type
		void primeDemo(int x){
			
		}
		
		
3. Create a class "Demo"
		1. write a main method
		2. Create a object for parent class --> check whether you are able to access only parent class members
		3. above step is performed, comment the second step code
		4. Create a object for child class --> check whether you are able to access both parent class members and child class members
=============================================================================================================
Assignment-9:

1. Write a Program for Multievel inheritance with A, B, C --> write instance variables, class variables, instance method, class methods, constructors
	Creates A, B, C and observe the behavior

2. Write a Program for Hierarchial inheritance with D, E, F --> write instance variables, class variables, instance method, class methods, constructors
	Creates D, E, F and observe the behavior

3. Write two different classes Test & Sample and write some instance variable and instance methods in both the classes
		Test --> parent class
		Sample --> child class

		Test ob1 = new Test();
		Sample ob2 = new Sample();
		Test ob3 = new Sample();
		Sample ob4 = new Test();

4. Create a class Demo--> In this class create instance variable, class variable, instance method, class method --> with access modifiers combination
	Ex:
	public int x=10;
	public static int y=20;

	private int a=30;
	private static int b=40;

	int i=50;
	static int j=60;

	protected int m=70
	protected int n=80;

	public void primeDemo(){

	}

	private void armstrongDemo(){

	}

	protected void evenOdd(){

	}

	void cube(){

	}

	public static void checkNumber(){

	}

	private static void addNumbers(){

	}

	protected static void multiplicationDemo(){

	}

	static void divisionNumbers(){

	}


1) Now access all these variables and methods within the same class --> All variables and methos should be able to access
2) within the same package create another class "Test" --> public, no name and protected variables and methods should be able to access (private memebers should not be allowed)
3) Create a class "Sample" outside the package --> public and protected (class must be inherited) --> (private members and no name members should not be accessible)

===================================================================================================================================================
/Method Overloading
1. Create a class called "Demo" --> 
	1. print() --> write the block of code for even odd number logic
	2. print(int x) --> write the block of code whether x is a prime number or not
	3. print(int x, int y) --> write the block of code sum of the numbers between x & y . under condition is when x is less than y
	4. print(int x, float y) --> write the block of code multiplication of x & y
	
	
	Create a object for a class --> and then call these methods

1. Create an abstract class "Test1" --> write one abstract method and one non-abstract method
	abstract method --> abstract void print();
	non-abstract method --> 
	void show(){
		//factorial number logic
	}
3. Create a normal class "Test2" --> inherit this class with "Test1" --> check the behavior whether 
it is asking you to implement the print() method implementation in the Test2 class
	
	implement the logic for print() method
	void print(){
		//prime number logic
	}
34. Crete a normal class "Test3" --> inherit this class with "Test1" --> check the behavior whether 
it is asking you to implement the print() method implementation in the Test2 class
	
	implement the logic for print() method
	void print(){
		//sum of the first 20 even numbers logic
	}
5. Create a demo class and write main method 
	write the below codes and check the behavior and output
		a) Test1 ob1 = new Test2(); --> check the output of ob1.print();
		a) Test1 ob1 = new Test3(); --> check the output of ob1.print();

6. Create a Interface called A --> write only one abstract method 
	void show();

7. Create a class B implements A
	void show(){
		//prime number logic
	}
8. Create a class C implements A
	void show(){
		//factorial number logic
	}
	
9. Create a class D implement A
	void show(){
		//armstrong number logic
	}
10. Create a class Demo--> write a main method
	//A ob = new B(); --> ob.show()
	//A ob = new C();--> ob.show();
	//A ob = new D();--> ob.show();

=====================================================================================================
Assignment-11:

1. String s1 = "Automation Catalogue";
    Write a Program to print the reverse of a String
    O/p: eugolataC noitamotuA
=====================================================================================================
Assignment-12:
1. String s1 = "Java Programming testing";
    Write a Program to print the reverse of a String with preserving spaces
    o/p: gnit  setgnimmarg orPavaJ
