OOPS - Object Oriented Programming Structure:
--------------------------------------------
==> Java, Python, C++, JavaScript, C#, Scala, Ruby .... etc.,

OOPS Principles:
----------------
1. Inheritance
2. Polymorphism
3. Abstraction
4. Encapsulation

==> To understand the above 4 principles we should know the language constructs they are
	1. Class
	2. Object
	
CLASS:
------
==> Class is a collection of variables and method

	Syntax:
	-------
	
		class <className>{
		
			public static void test(){
				-----------
				-----------
				-----------
			}
		
			public static void main(String args[]){
				-----------
				-----------
				-----------
			}
			
			public static void qa(){
				----------
				----------
				----------
			}
		
		}
		
	Examples:
	---------
	
		class Emp{
			int empNo;
			float empSalary;
			char empSurName;
			
			void addEmployee(){
				--------
				-------
				-------
			}
			
			void deleteEmployee(){
				-------
				-------
				-------
			}
		
		}
		
		//className: --> Emp
		//methodNames: addEmployee(), deleteEmployee()
		//Variables: empNo, empSalary, empSurName
		
Object:
-------
==> Object is a instance of class

	Syntax:
	-------
		className objectReference = new Constructor();
		
	Example:
	-------
		Emp ob1 = new Emp();
		
		//ob1 --> ObjectReference --> contains the hashcode --> reference of your data
		//new Emp(); --> Object --> Contains the data
		
		new Emp();--> Anonymous Object
		
Variables:
---------
==> Variable is a container which contains some data

1. Instance Variables
2. Class Variables
3. Local Variables


Instane Variables:
------------------
==> A variable i.e., declared as a member of a class is known as Instance variable
==> Instance variables memory allocation happens whenever object is created
==> Instance variables are stored in heap are memory

Class Variables:
----------------
==> A variable i.e., declared as a static member of a class is known as class variable
==> Class variables memory allocation happens whenever class is loaded
==> class variables are stored in method area memory

Local Variables:
----------------
==> A variable i.e., defined inside a method is called as Local Variable
==> Local variable memory allocation happens whenever method is called
==> Local variables are stored in Stack area memory

Execution Priority:
-------------------
1. Class Variables
2. main method

Note:
1. Local variables can not be static in Java
2. There is no global variables concept in java


In Java, Instance variables can be accessed in '2' ways
1. By using Object
2. By using ObjectReference

==> Use Object to access an instance variable if it is required only one time
==> User Object Reference to access an instance variable if it required more than one time


In Java, there are '4' to access the class variable
1. Directly
2. By using ClassName
3. By using Object
4. By using ObjectReference
	
	Both Object and ObjectReference are not recommended to use
	
==>Access the class Variable directly if it is present in the same class
==>use classname to access class variable if it is present in different class
	
	
In Java, there is only one way to access the Local variable i.e., Directly

==>Use className to access class variable whenever both class variable and Local variable names are same


==> Only one copy of class variables exists for all objects
==> Separate copy of instance variables exists for every object

public class VarDemo1 {
    int x=5;//instance variable
    static int y=10;//class variable

    public static void main(String[] args) {
        VarDemo1 ob1 = new VarDemo1();
        VarDemo1 ob2 = new VarDemo1();

        ob1.x = ob1.x+2;
        ob1.y = ob1.y+2;

        System.out.println(ob1.x);
        System.out.println(ob1.y);
        System.out.println(ob2.x);
        System.out.println(ob2.y);
    }
}


=====================================================================================
class Emp{											class Emp{
	int empNo;											int empNo;
	float empSalary;									static float empSalary;
}													}

													empSalary=1000 --> 4 bytes
Emp ob1 = new Emp();								Emp ob1 = new Emp();
ob1 --> empNo, empSalary --> 8 bytes				ob1 --> emNo --> 4 bytes

Emp ob2 = new Emp();								Emp ob2 = new Emp();
ob2 --> empNo, empSalary --> 8 bytes				ob2 --> empNo --> 4 bytes

Emp ob3 = new Emp();								Emp ob3 = new Emp();
ob3 --> empNo, empSalary --> 8 bytes				ob3 --> empNo --> 4 bytes

----------------------------						---------------------
----------------------------						---------------------
----------------------------						---------------------

Emp ob100 = new Emp();								Emp ob100 = new Emp();
ob100 --> empNo, empSalary --> 8 bytes				ob100 --> empNo --> 4 bytes

800 bytes											400 + 4 bytes --> 404 bytes


==> Use the Instance variable, if value is changing for every object
==> Use the class variable, if value is same for all objects/every object
==> Use the Local variable, whenever some action is performed


Garbage Collector:
------------------
==> Garbage means unused objects

//Garbage Collector:
--------------------
==> It is the JVM component and it collects the garbage whenever CPU gets free time. because garbage collector priority is least priority
==> priority number is '1'

==> It is also possible to call garbage collector explicitly by using gc() method of java.lang.System class

class Demo{
	int x=5; 
	int y=10;
	public static void main(String args[]){
		Demo ob1 = new Demo();
		Demo ob2 = new Demo();
		Demo ob3 = new Demo();
		
		---------------
		---------------
		---------------
		ob1=null;
		
		--------------
		--------------
		--------------
		ob2=ob3;
	}
}

int x;//Declaration
x=10;//Assignment
int x=10;//initialization


Arrays:
-------
==> An array is a collection of similar data elements

==> An array index always strts  with '0' and ends with size-1


1. Declaration:
----------------
	Syntax:
		DataType arrayRef[] = new DataType[size];
		
	Example:
		int a[] = new int[10];
2. Assignment:
--------------
	Syntax:
		arrayRef[index] = literal;
		
	Examples:
		a[0]=72;
		a[2]=98;
		
3. Initialization:
-------------------
	Syntax:
		Datatype arrayRef[]={literal1, literal2, literal3, literal4,......};

	Example:
		int a[]={72,45,500,68,95};
		
Advanced For Loop/Enhance For Loop/For Each Loop:
-------------------------------------------------

	Syntax:
	-------
		for(DataType variableName:arrayRef){
			--------------
			--------------
			--------------
		}
		
	Examples:
	---------
		for(int b:a){
			------------
			------------
			------------
		}
		
METHODS:
--------
==> Method is a group of statement into a single logical unit

Advantages:
----------
1. Reusability
2. Modularity

==> There are '2' types of methods in Java
1. Instance Method
2. Class Method

Instance Method:
----------------
==> A method that is defined as a member of a class is known as Instance method

There are 2 ways to access Instance method
	1. By using Object
	2. By using Object Reference
	
Class Method:
-------------
==> A method that is defined as a static member of a class is known as class method
There are 4 ways to access class methods
	1. Directly
	2. By using Class Name
	3. By using Object
	4. By using Object Reference
	
1. Method Definition --> Actual Logic will be called
2. Method call Statement --> This is a statement to execute your block of code

==> Both Instance Method and Class Methods are divided into '4' Categories
1. Method without return type and without arguments
2. Method without return type and with arguments
3. Method with return type and without arguments
4. Method with return type and with arguments


1. Method without return type and without arguments:
----------------------------------------------------
	Syntax:
		
		//Method definition - Instance Method
		void methodName(){
			------------
			------------
			------------
		}
		
		//ob1.methodName(); - Method Call Statement
		
2. Method without return type and with arguments
-------------------------------------------------
	Syntax:
	
		void methodName(DataType1 var1, DataType2 var2, DataType3 var3,......................DataType varN){
			---------------------
			---------------------
			---------------------
		}
		
		Examples:
			
			void print(int x, float y, char ch){//method definition
				--------
				--------
				--------
			}
			
			ob1.print(10, 45.23f, 'G');//method call statement
			
			