1. OrangeHRM - Employee Management Website
	https://automatetest-trials710.orangehrmlive.com
	username: Admin
	Password: Admin@123
	
2. DemoWebshop - Ecommerce website
	http://demowebshop.tricentis.com/login
	Email: aarosagarch@gmail.com
	Password: Admin@123


Automatio Testing Tools:
------------------------
1. Selenium
2. TOSCA
3. Cypress
4. WebDriver IO
5. PlayWright
6. UFT (QTP)
7. Appium
8. Rest Assured API Library
9. Test Complete
10. Katalon Studio etc.,


Applications:
-------------
1. Web Applications
2. Desktop Applications/Windows Applications
3. Mobile Applications

Selenium
--------
==> Selenium Purely supporting Web Based Automation testing
==> Official Selenium Website
https://www.selenium.dev/

1. Selenium IDE - Record/Playack
2. Selenium WebDriver - Web Automation Testing tool
3. Selenium Grid - To Run your automation Scrpts in Parallel in Multiple Browsers and Multiple Operating Systems

Browsers:
---------
1. Chrome
2. Mozilla Firefox
3. Safari
4. Internet Explorer
5. Microsoft Edge


Operating Systems:
------------------
1. Windows
2. Mac (iOS)
3. Linux

Programming Languages:
----------------------
1. Java
2. JavaScript
3. Python
4. Ruby
5. C#.Net


==> Please try to maintain Latest Version of Selenium Library with Browser Latest version

How to Download Selenium WebDriver Libraries and Add it to Java Project:
-------------------------------------------------------------------------
Open the Selenium.Dev website --> Click on Downloads --> Go to the Java Language Bindings --> Download the Latest Selenium Library
Extract the Selenium Library in C:\FIServ-Automation\Jars\selenium-java-4.13.0

Now Open IntelliJIdea - Java Project --> Click on File --> Click on Project Structure --> Click on Modules --> Click on Dependencies
Click on + Add button --> Select Jars or Directories --> Browse the Above Selenium Libraries and Click on OK
--> Selenium Libraries will be added to the Project


WebDriver:
----------
==> WebDriver is a Interface in Selenium Library
==> We cannot Create Object for WebDriver

						WebDriver (I)
							|
			----------------------------------------------------------------------------
			|					|					|					|				|
			ChromeDriver		ChromiumDriver		FirefoxDiver		......			............
			
			
Methods:
--------
1. void get(String URL); --> This method is used to load the Website
2. String getTitle(); --> This method is used to get the title of the webpage
3. navigate().to(String url)--> This method is used to load the URL
4. void close() --> This method is used to close the browser
5. void quit() --> This method is used to close browser
6. manage().window().maximize() --> This method is used to maximize the browser window
7. String getCurrentURL() --> This method is used to get the Current URL of the application
8. String getPageSource() --> This method is used to get the page source of the application
9. navigate().forward() --> This method is used to move forward in the current browser window
10. navigate().back() --> This method is used to move backward in the current browser window
11. WebElement findElement(By by) --> This method is used to find the Element of a page/application

12. getWindowHandle() --> This method is used to get the the current window Session ID
13. getWindowHandles() --> This method is used to return the number of windows which are opened by WebDriver
14. switchTO() --> This method is used to used to switch between the browser windows
15. findElements() --> This method is used to return the list of elements in a page/application

Difference between get() and navigate().to():
----------------------------------------------
==> Both get(String url) and navigate.to(String url) methods are used to load the given URL.
	When get() method is used, driver will wait till the complete page/application is loaded and then it moves to next step in the script
	When navigate().to() method is used, driver will not wait till the complete page/application is loaded. It just loads the url and moves to the next step in the script
	
Difference between close() and quit():
--------------------------------------
==>Both close() and quit() methods are used to close the browsers
	When close() method is used, driver will close the current window which is opened by WebDriver
	When quit() method is used, driver will close all the windows which are opened by WebDriver


Locators:
----------
==> There are '8' types of locators present in selenium
1. Name
2. ID
3. ClassName
4. LinkText
5. PartialLinkText
6. TagName
7. Xpath
8. CssSelector


Selenium WebDriver Locators:
----------------------------

ClassName :
-----------
By
1. By id(String args);
2. By name(String args);
3. By linkText(String args);
4. By partialLinkText(String args);
5. By className(String args);
6. By tagName(String args);
7. By xpath(String args);
8. By cssSelector(String args);

==>DOM --> Document Object Model --> Where all the WebElements/Objects are stored in a page

==> 1. Click on F12 button --> DOM will be opened
		(OR)
==> 2. Right click on a specific Element --> Click on Inspect option


											WebElement
==> WebElement in Selenium is refers the HTML element in a DOM.
==> WebElement is a interface in Selenium

WebElement methods:
-------------------
1. public void sendKeys(CharSequence args0); --> This method is used to enter a text in an element (Ex: Text-box)
2. public void click(); --> This method is used to click on the identified webelement
3. public void clear(); --> This method is used to clear the text, if there is a text available in the element
4. public boolean isDisplayed(); --> This method is used to check whether element is displayed or not once element is found
								 --> if element is not found, we will get NoSuchElementException
5. public boolean isEnabled(); --> This method is used to check whether element is enabled or not
6. public String getText(); --> This method is used to get the Text of a element
7. public void submit(); --> This method is used to submit a form to the remote server, if the current element is a form (OR) current element is available with in a form
8. public boolean isSelected(); --> This method is used to Determine whether element is selected or not
9. public String getAttribute(String args0); --> This method is used to get the value of a given Attribute of the element
10. public String getCssValue(String args0); --> This method is used to get the value of given CSS property
11. public String getTagName(); --> This method is used to return the tagName of a given element
12. public Point getLocation(); --> This method is used to get the Element Location where on the page



13. public Point getSize; --> This method is used to get the Element Size on the page



XPATH:
------
==> XPATH is also called as XML path
==> XML Path expression is used to find any kind of WebElement on web page uniqely using HTML page DOM.

Xpaths broadly divided into three categories:
-------------------------------------------
1. Absolute Xpath
2. Relative Xpath
3. Xpath with Attributes 

==> xpath with Attributes is the bestway --> If this way giving duplicate elements --> we need to write the relative xpath

How to write a Xpath?
---------------------
==> As a tester, If you want to write the xpath, you need to identify the starting point (tagname) and ending point (tagname) in HTML DOM
==> Once Identified the start point(tagName) and end point(tagName), traversing between the startpoint to endpoint will becomes xpath

==> Endpoint (tagName) is always constant. i.e., your highlighted element (which shows in blue color)
==> Startpoint(tagName) could be anywhere in the DOM. We need to identify the best optimized xpath when we identify the start point
==> Best Startpoint (tagName) will be identified with the experience

Absolute Xpath:
--------------
==> Starting point of the node is always constant for Absolute xpath i.e., html tagName
==> Ending point is always the highlighted webelement
==> traverse between your start point to endpoint will become your xpath

points to be considered while writing a xpath:
----------------------------------------------
1. If the same tagNames are repeated continuosly one parent, then count (number) should be appended after the tagName
2. Whenever traversing from one tagName to another tagName i.e., parent node to child node, we should use '/' should be used to distinguish the parent and child nodes

Syntax:
-------
/html/................../end node


XPATH With Attributes:
----------------------
==> starting point and ending point of the node is always constant i.e., highlighted webelement

1. Xpath with single Attribute
------------------------------ 
Syntax:
		//htmltagName[@attributeType='attributeValue']
		
2. Xpath with multiple Attributes
------------------------------------
Syntax:		
		//htmltagName[@attributeType1='attributeValue1'][@attributeType2='attributeValue2']...........[@attributeTypeN='attributeValueN'] 
		
		
Relative XPATH:
---------------
==> In the Relative XPATH, starting point can be any node. best relative xpath can be written based on your experience
==> To Identify the starting point of the node, there are 'n' number of ways are available, can use anyone of the approach to identify the relative xpath of an WebElement


Syntax:
------
	//htmltagName[@attributename='attribtuteValue']/................/end point in the HTML (Highlighted line in the DOM)
	
CSS Selectors:
--------------
==> cssSelector is a path pattern that can use web element's attributes to locate a web element in the web page
==> cssSelector is very fast compared to Xpath, because Xpath engines are different in each browser. Therefore some times xpath are not suitable to identify element on IE and CSS is recommended for the same.
==> cssSelector is light weight compared to xpath and it is very straight forward

Limitation:
-----------
==> cssSelector locates the elements only in forward direction

syntax:
-------
		htmlTagName[arritbuteType='attributeValue'] --> Single Attribute
		htmlTagName[arritbuteType1='attributeValue1'][arritbuteType2='attributeValue2'] --> with Multiple attributes
		
	Note:	==>	*[attributeName='attributeValue'] --> This will check for all the tags in the DOM
			==>	[attributeName='attributeValue'] --> Can write the cssSelector without TagName and HtmlTagName also
			
		Examples:
		1. input[name='q'] --> Google Search text-box
		2. input[name='txtPassword'][id='txtPassword'] --> password button in OrangeHRM
		
Using (#) Symbol:
-----------------
==> # Symbol is used along with the ID attribute to identify the web element in a web page

	Syntax:
	-----------
		"#attributeValue" --> will become your cssSelector
		
	Examples:
	---------
	1. #txtPassword --> Password in OrangeHRM
	2. #glow-ingress-line2 --> Select your Addresss link in Amazon
	3. input[name='txtUsername']#txtUsername --> UserName in OrangeHRM
	
Using (Dot) Symbol:
-------------------	
==> . Symbol is used along with the className attribute to identify the web element in a web page
	
	Syntax:
	-----------
		".attributeValue" --> will become your cssSelector
		
		
	Examples:
	---------
	==> .makeFlex.hrtlCenter.font10.makeRelative.lhUser.userLoggedOut --> Login or Create Acount button in Makemytrp website
	==> .top-level-menu-item.forced-active.active ==> Dashboard in OrangeHRM
	==> .css-label_c.t_c --> Flexible with Date in OrangeHRM
